//The approach is to first split the strings based on the decimal point (.), 
//then convert them to numerical data. After that, 
//we need to pad the shorter array with zeros to make its length the same as the longer one. 
//Finally, we compare each digit one by one, with the larger number winning. 
//If the digits are the same, 
//we continue comparing until we reach the end and return 0 to indicate a tie.

class Solution {
public:

std::vector<int> split_string(const std::string& str, char delimiter) {  
    std::vector<int> tokens;  
    std::string token;  
    std::istringstream tokenStream(str);  
    while (std::getline(tokenStream, token, delimiter)) {  
        tokens.push_back(stoi(token));  
    }  
    return tokens;  
}  

    int compareVersion(string version1, string version2) {
        int num1 = std::count(version1.begin(), version1.end(), '.');
        int num2 = std::count(version2.begin(), version2.end(), '.');
        cout << num1 << " oo " << num2 << endl;
        

        if (num1 > num2) {
            for (int i = num2; i < num1; i++) {
                version2 += ".0";
            }
        } else if (num1 < num2) {
            for (int i = num1; i < num2; i++) {
                version1 += ".0";
            }
        } else {
            // nothing
        }
        cout << version1 << " ll " << version2 << endl;
        vector<int> kk = split_string(version1, '.');
        vector<int> ff = split_string(version2, '.');

        for(int i=0; i<kk.size(); i++)
        {
            if(kk[i]>ff[i])
            {
                return 1;
            }else if(kk[i] < ff[i]) {
                return -1;
            }
        }
    return 0;
    }
};
